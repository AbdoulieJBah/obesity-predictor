# -*- coding: utf-8 -*-
"""App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MHUaljpbNf5KVjY4nh5uwsmGMLEPWaQh
"""

import streamlit as st
import pickle
import pandas as pd
import altair as alt
import requests, zipfile, io, os

# ================================
# ‚úÖ Load the Trained Model from a ZIP on Google Drive
# ================================
MODEL_URL = "https://drive.google.com/uc?id=1rKlJchoSdOOvH3YAtb3u6CQ9p0P3_eW5"  # üëà Replace with your file ID
MODEL_ZIP_PATH = "obesity_model_pipeline.zip"
MODEL_PKL_PATH = "obesity_model_pipeline.pkl"

@st.cache_resource
def load_model():
    # Download ZIP if not exists
    if not os.path.exists(MODEL_PKL_PATH):
        st.info("üì¶ Downloading model (zip)... please wait a few seconds ‚è≥")
        response = requests.get(MODEL_URL)
        with open(MODEL_ZIP_PATH, "wb") as f:
            f.write(response.content)

        # Unzip the model
        with zipfile.ZipFile(MODEL_ZIP_PATH, "r") as zip_ref:
            zip_ref.extractall(".")
        st.success("‚úÖ Model downloaded and extracted successfully!")

    # Load model
    with open(MODEL_PKL_PATH, "rb") as f:
        model = pickle.load(f)
    return model

model = load_model()


# ================================
# ‚úÖ App Configuration
# ================================
st.set_page_config(page_title="Obesity Predictor", page_icon="üçî", layout="centered")

# Sidebar
st.sidebar.header("About the App ü•ó")
st.sidebar.info("Predicts obesity levels based on demographic, lifestyle, and dietary factors.")
st.sidebar.write("üë®‚Äçüíª Created by Abdoulie J. Bah")

# Page Styling
st.markdown("""
<style>
div.stButton > button {background-color:#388e3c;color:white;height:3em;width:100%;border-radius:10px;font-weight:bold;}
div.stButton > button:hover {background-color:#66bb6a;}
h2,h3 {color:#1b5e20;text-align:center;}
</style>
""", unsafe_allow_html=True)

st.markdown("<h1>üçî Obesity Prediction App</h1>", unsafe_allow_html=True)
st.write("Predict your obesity level based on lifestyle, diet, and demographics.")

# ================================
# ‚úÖ Input Fields
# ================================
st.header("üìù Enter Your Data")

# Demographics
st.subheader("üë§ Demographics")
col1, col2 = st.columns(2)
with col1:
    gender = st.radio("Gender", ["Male", "Female"])
    age = st.slider("Age", 1, 120, 25)
    height = st.slider("Height (cm)", 50, 250, 170)
with col2:
    weight = st.slider("Weight (kg)", 10, 300, 70)
    family_history = st.radio("Family History with Overweight", ["Yes", "No"])
    faf = st.slider("Physical Activity Frequency (per week)", 0, 10, 3)
    tue = st.slider("Time Using Technology Devices Daily (hours)", 0, 24, 3)

# Diet & Lifestyle
with st.expander("ü•ó Diet & Eating Habits"):
    favc = st.radio("Frequent Consumption of High-Calorie Food", ["Yes", "No"])
    fcvc = st.slider("Daily Vegetable Consumption Frequency (1‚Äì3)", 1, 3, 2)
    ncp = st.slider("Number of Main Meals per Day", 1, 5, 3)
    caec = st.selectbox("Consumption of Food Between Meals", ["Never", "Sometimes", "Frequently", "Always"])
    ch2o = st.slider("Daily Water Consumption (Liters)", 0.0, 5.0, 2.0, 0.1)
    scc = st.radio("Calories Consumption Monitoring", ["Yes", "No"])
    calc = st.radio("Consumption of Alcohol", ["Yes", "No"])
    smoke = st.radio("Do You Smoke?", ["Yes", "No"])
    mtrans = st.selectbox("Transportation Used", ["Automobile", "Motorbike", "Bike", "Public_Transport", "Walking"])

# ================================
# ‚úÖ Prediction Logic
# ================================
if st.button("üîç Predict Obesity Level"):

    # Create input DataFrame matching original dataset columns
    input_data = pd.DataFrame([{
        "Gender": gender,
        "Age": age,
        "Height": height,
        "Weight": weight,
        "family_history_with_overweight": family_history,
        "FAVC": favc,
        "FCVC": fcvc,
        "NCP": ncp,
        "CAEC": caec,
        "SMOKE": smoke,
        "CH2O": ch2o,
        "SCC": scc,
        "FAF": faf,
        "TUE": tue,
        "CALC": calc,
        "MTRANS": mtrans
    }])

    # Make prediction using pipeline (handles preprocessing internally)
    prediction = model.predict(input_data)[0]
    prediction_proba = model.predict_proba(input_data)[0]

    # Display result
    emoji_map = {
        'Insufficient_Weight':'üü¶','Normal_Weight':'‚úÖ',
        'Overweight_Level_I':'‚ö†Ô∏è','Overweight_Level_II':'‚ö†Ô∏è',
        'Obesity_Type_I':'üî¥','Obesity_Type_II':'üî¥','Obesity_Type_III':'üî¥'
    }
    pred_emoji = emoji_map.get(prediction,'‚ùì')

    tips_map = {
        'Insufficient_Weight': "ü•ó Tip: Gain healthy weight with balanced diet & exercise.",
        'Normal_Weight': "‚úÖ Tip: Maintain your healthy lifestyle.",
        'Overweight_Level_I': "‚ö†Ô∏è Tip: Increase activity, reduce high-calorie food.",
        'Overweight_Level_II': "‚ö†Ô∏è Tip: Exercise regularly and consult nutritionist.",
        'Obesity_Type_I': "üî¥ Tip: Consult healthcare professional.",
        'Obesity_Type_II': "üî¥ Tip: Structured weight loss program.",
        'Obesity_Type_III': "üî¥ Tip: Intensive medical supervision required."
    }
    tip_text = tips_map.get(prediction, "")

    st.markdown(f"""
    <div style='text-align:center; padding:15px; border-radius:10px; background-color:#e8f5e9;'>
    <h3>Predicted Obesity Level: <b>{prediction} {pred_emoji}</b></h3>
    <p>{tip_text}</p>
    </div>
    """, unsafe_allow_html=True)

    pred_index = list(model.classes_).index(prediction)
    pred_prob = prediction_proba[pred_index]
    st.markdown(f"**Confidence:** {pred_prob*100:.2f}%")
    st.progress(pred_prob)

